name: Build, Test and Publish

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

permissions:
  contents: write
  actions: read
  checks: write

defaults:
  run:
    working-directory: src

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET 6
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.*

    - name: Setup Node 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - run: npm -g install npm@10 

    - name: Run Storybook
      working-directory: src/web
      run: |
        npm i
        npm run build-storybook
        (npm run storybook &)

    - name: Build
      run: dotnet build --configuration Release
      
    - name: Run Tests
      run: dotnet test --configuration Release --logger "trx;LogFileName=report.trx" --no-restore --no-build --verbosity normal Tests

    - name: Tests Report
      uses: dorny/test-reporter@v1.8.0
      if: success() || failure()
      with:
        name: Tests Report
        working-directory: src/Tests
        path: TestResults/report.trx
        reporter: dotnet-trx 
        
    - name: Publish on version change
      shell: bash
      env:
        NUGETKEY: ${{ secrets.NUGETKEY }}        
      run: |
        function publish_project() {
          ProjectName="$1"
          Version=$(grep --only-matching --perl-regex '<Version>[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+)?</Version>' "$ProjectName/$ProjectName.csproj" | grep --only-matching --perl-regex '[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+)?')
          echo "Version=$Version"
          if test -z "$Version"; then
            echo "Could not get version from $ProjectName.csproj"
            exit 1
          fi
          git fetch --tags
          if test -n "$(git tag --list "$ProjectName-$Version" | tr -d '[:space:]')"; then
            echo "Version $Version already exists for $ProjectName"
          else
            dotnet pack "$ProjectName" --configuration Release --no-build --include-symbols --nologo --output nuget &&\
            dotnet nuget push nuget/*.nupkg --source 'https://api.nuget.org/v3/index.json' --api-key "$NUGETKEY" --skip-duplicate &&\
            git tag "$ProjectName-$Version" && git push origin "$ProjectName-$Version" || { echo "Error occurred"; exit 1; }
          fi
        }
        
        publish_project "Controls"
        publish_project "Controls.Extensions"